# =====================================================================
# üç£ Generated Docker Compose Configuration
# Auto-generated by Sushi Kitchen Manifest System v1.0.0
# 
# User Selections:
#   - Combo: combo.chat-local
#   - Privacy Profile: open_research  
#   - Environment: development
#   - Generation Time: 2025-09-16T23:15:00Z
# 
# Automatically Resolved Dependencies:
#   - hosomaki.ollama (user selected)
#   - hosomaki.anythingllm (user selected)
#   - futomaki.qdrant (auto-added for vector_storage capability)
#   - futomaki.postgresql (auto-added for relational_storage capability)
# =====================================================================

version: '3.9'

# =====================================================================
# DEPLOYMENT METADATA
# Information about how this configuration was generated
# =====================================================================
x-sushi-metadata:
  labels:
    - "sushi.kitchen.generated=true"
    - "sushi.kitchen.version=1.0.0"
    - "sushi.kitchen.generated-at=2025-09-16T23:15:00Z"
    - "sushi.kitchen.privacy-profile=open_research"
    - "sushi.kitchen.environment-template=development"
    - "sushi.kitchen.combo-ids=combo.chat-local"
    - "sushi.kitchen.service-count=4"
    - "sushi.kitchen.estimated-resources=cpu:4,memory:8gb,storage:50gb"

# =====================================================================
# COMMON CONFIGURATION ANCHORS
# Reusable configuration blocks for consistency
# =====================================================================
x-common-logging: &common-logging
  logging:
    driver: "json-file"
    options:
      max-size: "50m"      # Larger log files for debugging
      max-file: "5"        # Keep more log files in development
      labels: "sushi.service,sushi.style"

x-common-restart: &common-restart
  restart: "unless-stopped"

x-development-security: &development-security
  security_opt:
    - no-new-privileges:false  # Relaxed for development debugging

# =====================================================================
# SERVICES
# All services configured according to contracts.yml specifications
# =====================================================================
services:

  # ===================================================================
  # OLLAMA - Local LLM Inference Engine
  # Provides: local_llm_inference capability
  # Style: hosomaki (core inference)
  # ===================================================================
  ollama:
    image: ollama/ollama:latest
    container_name: sushi_ollama
    platform: linux/amd64
    profiles: ["hosomaki"]
    
    ports:
      - "11434:11434"  # LLM inference API
      
    volumes:
      - ollama_data:/root/.ollama
      
    environment:
      # Development-optimized Ollama settings
      OLLAMA_HOST: "0.0.0.0"
      OLLAMA_MODELS: "/root/.ollama/models"
      OLLAMA_KEEP_ALIVE: "5m"        # Shorter keep-alive for development
      OLLAMA_DEBUG: "true"           # Enable debug logging
      OLLAMA_VERBOSE: "true"         # Verbose output for development
      OLLAMA_LOG_LEVEL: "debug"      # Maximum logging detail
      
    # GPU access for better performance (optional)
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
        limits:
          cpus: '2.0'
          memory: 4G
          
    networks:
      - sushi_net
      
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
      
    <<: *common-logging
    <<: *common-restart
    <<: *development-security

  # ===================================================================
  # ANYTHINGLLM - RAG Document Chat Interface  
  # Requires: local_llm_inference, vector_storage, relational_storage
  # Style: hosomaki (core application)
  # ===================================================================
  anythingllm:
    image: mintplexlabs/anythingllm:latest
    container_name: sushi_anythingllm
    platform: linux/amd64
    profiles: ["hosomaki"]
    
    ports:
      - "3001:3001"  # Web interface
      
    volumes:
      - anythingllm_storage:/app/server/storage
      - anythingllm_hotdir:/app/collector/hotdir
      
    environment:
      # Storage and processing configuration
      STORAGE_DIR: "/app/server/storage"
      
      # LLM provider configuration (connects to Ollama)
      LLM_PROVIDER: "ollama"
      OLLAMA_BASE_PATH: "http://ollama:11434"
      
      # Embedding configuration (use Ollama for embeddings)
      EMBEDDING_ENGINE: "ollama"
      EMBEDDING_BASE_PATH: "http://ollama:11434"
      
      # Vector database configuration (connects to Qdrant)
      VECTOR_DB: "qdrant"
      QDRANT_ENDPOINT: "http://qdrant:6333"
      
      # Application database configuration (connects to PostgreSQL)
      DATABASE_CONNECTION_STRING: "postgresql://anythingllm:${POSTGRES_PASSWORD}@postgresql:5432/anythingllm"
      
      # Development-specific settings
      JWT_SECRET: "${ANYTHINGLLM_JWT_SECRET}"
      
    depends_on:
      ollama:
        condition: service_healthy
      qdrant:
        condition: service_healthy  
      postgresql:
        condition: service_healthy
        
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
          
    networks:
      - sushi_net
      
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/system"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s
      
    <<: *common-logging
    <<: *common-restart
    <<: *development-security

  # ===================================================================
  # QDRANT - Vector Database for Document Embeddings
  # Provides: vector_storage capability
  # Style: futomaki (knowledge/storage)
  # ===================================================================
  qdrant:
    image: qdrant/qdrant:latest
    container_name: sushi_qdrant
    platform: linux/amd64
    profiles: ["futomaki"]
    
    ports:
      - "6333:6333"  # REST API
      - "6334:6334"  # gRPC API (optional)
      
    volumes:
      - qdrant_storage:/qdrant/storage
      
    environment:
      # Qdrant configuration
      QDRANT__SERVICE__HTTP_PORT: "6333"
      QDRANT__SERVICE__GRPC_PORT: "6334"
      
      # Development-friendly settings
      QDRANT__LOG_LEVEL: "debug"
      QDRANT__SERVICE__ENABLE_CORS: "true"    # Allow browser access for debugging
      QDRANT__TELEMETRY_DISABLED: "true"      # Disable telemetry in development
      
      # Performance settings for development
      QDRANT__STORAGE__PERFORMANCE__MAX_SEARCH_THREADS: "2"  # Limit for development
      
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
          
    networks:
      - sushi_net
      
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
      
    <<: *common-logging
    <<: *common-restart
    <<: *development-security

  # ===================================================================
  # POSTGRESQL - Relational Database for Application Data
  # Provides: relational_storage capability  
  # Style: futomaki (knowledge/storage)
  # ===================================================================
  postgresql:
    image: postgres:15-alpine
    container_name: sushi_postgresql
    platform: linux/amd64
    profiles: ["futomaki"]
    
    ports:
      - "5432:5432"  # PostgreSQL connection
      
    volumes:
      - postgresql_data:/var/lib/postgresql/data
      
    environment:
      # Database configuration
      POSTGRES_DB: "anythingllm"
      POSTGRES_USER: "anythingllm"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      PGDATA: "/var/lib/postgresql/data/pgdata"
      
      # Development-friendly logging
      POSTGRES_LOG_STATEMENT: "all"      # Log all SQL statements for debugging
      POSTGRES_LOG_DURATION: "true"      # Log query durations
      POSTGRES_LOG_CHECKPOINTS: "true"   # Log checkpoint activity
      POSTGRES_LOG_CONNECTIONS: "true"   # Log connection attempts
      POSTGRES_LOG_DISCONNECTIONS: "true"
      
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
          
    networks:
      - sushi_net
      
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U anythingllm -d anythingllm"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
      
    <<: *common-logging
    <<: *common-restart
    <<: *development-security

# =====================================================================
# NETWORKS
# Single network configuration for open research profile
# =====================================================================
networks:
  sushi_net:
    driver: bridge
    driver_opts:
      # Enable inter-container communication for development
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
    ipam:
      driver: default
      config:
        - subnet: "172.20.0.0/16"
          gateway: "172.20.0.1"
          ip_range: "172.20.1.0/24"
    labels:
      - "sushi.kitchen.network.profile=open_research"
      - "sushi.kitchen.network.isolation=minimal"
      - "sushi.kitchen.network.purpose=development"

# =====================================================================
# VOLUMES
# Persistent storage for all services
# =====================================================================
volumes:
  # Ollama model storage
  ollama_data:
    driver: local
    labels:
      - "sushi.kitchen.volume.service=ollama"
      - "sushi.kitchen.volume.backup_priority=medium"
      - "sushi.kitchen.volume.content=models"
      
  # AnythingLLM application storage
  anythingllm_storage:
    driver: local
    labels:
      - "sushi.kitchen.volume.service=anythingllm"
      - "sushi.kitchen.volume.backup_priority=high"
      - "sushi.kitchen.volume.content=application_data"
      
  # AnythingLLM document hotdir
  anythingllm_hotdir:
    driver: local
    labels:
      - "sushi.kitchen.volume.service=anythingllm"
      - "sushi.kitchen.volume.backup_priority=high"  
      - "sushi.kitchen.volume.content=document_uploads"
      
  # Qdrant vector storage
  qdrant_storage:
    driver: local
    labels:
      - "sushi.kitchen.volume.service=qdrant"
      - "sushi.kitchen.volume.backup_priority=critical"
      - "sushi.kitchen.volume.content=vector_embeddings"
      
  # PostgreSQL database storage
  postgresql_data:
    driver: local
    labels:
      - "sushi.kitchen.volume.service=postgresql"
      - "sushi.kitchen.volume.backup_priority=critical"
      - "sushi.kitchen.volume.content=database"

# =====================================================================
# DEPLOYMENT INFORMATION
# Additional metadata for management and troubleshooting
# =====================================================================
x-sushi-deployment-info:
  generation_timestamp: "2025-09-16T23:15:00Z"
  
  selected_combos:
    - id: "combo.chat-local"
      name: "Local Chat"
      services: ["hosomaki.ollama", "hosomaki.anythingllm"]
      
  privacy_profile: "open_research"
  environment_template: "development"
  
  estimated_resources:
    total_cpu_cores: 4
    total_memory_gb: 8
    total_storage_gb: 50
    gpu_required: false
    gpu_memory_gb: 0
    
  service_dependencies:
    hosomaki.anythingllm:
      requires:
        - hosomaki.ollama
        - futomaki.qdrant
        - futomaki.postgresql
    hosomaki.ollama: []
    futomaki.qdrant: []
    futomaki.postgresql: []
    
  capability_providers:
    local_llm_inference: "hosomaki.ollama"
    vector_storage: "futomaki.qdrant"
    relational_storage: "futomaki.postgresql"
    
  health_check_endpoints:
    ollama: "http://localhost:11434/api/tags"
    anythingllm: "http://localhost:3001/api/system"
    qdrant: "http://localhost:6333/health" 
    postgresql: "pg_isready check"
    
  external_ports:
    web_interface: "http://localhost:3001"
    ollama_api: "http://localhost:11434"
    qdrant_api: "http://localhost:6333"
    postgresql_db: "postgresql://localhost:5432"
    
  backup_priorities:
    critical: ["postgresql_data", "qdrant_storage"]
    high: ["anythingllm_storage", "anythingllm_hotdir"]
    medium: ["ollama_data"]
    
  # Validation commands for testing deployment
  validation_commands:
    service_health: "docker-compose ps"
    ollama_models: "docker-compose exec ollama ollama list"
    qdrant_health: "curl -f http://localhost:6333/health"
    anythingllm_api: "curl -f http://localhost:3001/api/system"
    database_connection: "docker-compose exec postgresql pg_isready -U anythingllm"