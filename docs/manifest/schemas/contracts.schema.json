{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "https://sushi-kitchen.dev/schemas/contracts.schema.json",
    "title": "Sushi Kitchen Service Contracts Schema",
    "description": "JSON Schema for validating technical service contracts that define Docker configurations, dependencies, and deployment specifications",
    "version": "1.1.0",
    
    "type": "object",
    "required": ["schema_version", "capabilities", "services"],
    "additionalProperties": false,
    
    "properties": {
      "schema_version": {
        "type": "string",
        "pattern": "^\\d+\\.\\d+(\\.\\d+)?$",
        "description": "Version of the contracts schema format being used"
      },
      
      "last_updated": {
        "type": "string",
        "format": "date",
        "description": "Date when the contracts were last modified"
      },
      
      "capabilities": {
        "type": "object",
        "minProperties": 1,
        "description": "Abstract interfaces that services can provide or require for dependency resolution",
        "patternProperties": {
          "^cap\\.[a-z-]+$": {
            "$ref": "#/$defs/capabilityDefinition"
          }
        },
        "additionalProperties": false
      },
      
      "network_profiles": {
        "type": "object",
        "description": "Network isolation patterns for different security and privacy requirements",
        "patternProperties": {
          "^[a-z-]+$": {
            "$ref": "#/$defs/networkProfile"
          }
        },
        "additionalProperties": false
      },
      
      "services": {
        "type": "object",
        "minProperties": 1,
        "description": "Complete technical specifications for each service including Docker configuration and dependencies",
        "patternProperties": {
          "^[a-z]+\\.[a-z0-9-]+$": {
            "$ref": "#/$defs/serviceContract"
          }
        },
        "additionalProperties": false
      },
      
      "dependency_resolution": {
        "type": "object",
        "description": "Rules and defaults for automatic dependency resolution",
        "properties": {
          "auto_resolve_providers": {
            "type": "boolean",
            "description": "Whether to automatically add required services when dependencies are detected"
          },
          
          "prefer_lightweight": {
            "type": "boolean",
            "description": "Prefer services with lower resource requirements when multiple providers exist"
          },
          
          "default_providers": {
            "type": "object",
            "description": "Default service choices for common capabilities",
            "patternProperties": {
              "^cap\\.[a-z-]+$": {
                "type": "string",
                "pattern": "^[a-z]+\\.[a-z0-9-]+$"
              }
            }
          },
          
          "conflicts": {
            "type": "array",
            "description": "Services that should not be deployed together",
            "items": {
              "$ref": "#/$defs/conflictDefinition"
            }
          },
          
          "scaling_rules": {
            "type": "object",
            "description": "Rules for scaling services based on resource constraints",
            "patternProperties": {
              "^[a-z-]+$": {
                "type": "object",
                "required": ["rule", "services"],
                "properties": {
                  "rule": {
                    "type": "string",
                    "minLength": 10
                  },
                  "services": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "pattern": "^[a-z]+\\.[a-z0-9-]+$"
                    },
                    "minItems": 1
                  }
                }
              }
            }
          }
        },
        "additionalProperties": false
      },
      
      "environment_templates": {
        "type": "object",
        "description": "Pre-configured environment variable sets for different deployment scenarios",
        "patternProperties": {
          "^[a-z_]+$": {
            "$ref": "#/$defs/environmentTemplate"
          }
        },
        "additionalProperties": false
      }
    },
    
    "$defs": {
      "capabilityDefinition": {
        "type": "object",
        "required": ["description", "providers", "interface"],
        "description": "Definition of an abstract capability that services can provide or require",
        "properties": {
          "description": {
            "type": "string",
            "minLength": 20,
            "maxLength": 200,
            "description": "Clear explanation of what this capability provides"
          },
          
          "providers": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[a-z]+\\.[a-z0-9-]+$"
            },
            "minItems": 1,
            "uniqueItems": true,
            "description": "Services that can provide this capability"
          },
          
          "interface": {
            "type": "string",
            "minLength": 10,
            "maxLength": 100,
            "description": "How consumers interact with this capability (API, protocol, etc.)"
          },
          
          "version_compatibility": {
            "type": "object",
            "description": "Version compatibility requirements between providers and consumers",
            "patternProperties": {
              "^[a-z]+\\.[a-z0-9-]+$": {
                "type": "string",
                "pattern": "^([~^]?\\d+\\.\\d+(\\.\\d+)?|\\*|latest)$"
              }
            }
          }
        },
        "additionalProperties": false
      },
      
      "networkProfile": {
        "type": "object",
        "required": ["description", "networks", "isolation_level"],
        "description": "Network isolation pattern for specific security requirements",
        "properties": {
          "description": {
            "type": "string",
            "minLength": 20,
            "maxLength": 200
          },
          
          "networks": {
            "type": "object",
            "minProperties": 1,
            "patternProperties": {
              "^[a-z_]+$": {
                "$ref": "#/$defs/networkDefinition"
              }
            }
          },
          
          "isolation_level": {
            "type": "string",
            "enum": ["none", "minimal", "moderate", "maximum"],
            "description": "Level of network isolation provided by this profile"
          },
          
          "compliance_features": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["audit_logging", "traffic_encryption", "access_controls", "data_retention", "anonymization"]
            },
            "uniqueItems": true,
            "description": "Compliance features enabled by this profile"
          }
        },
        "additionalProperties": false
      },
      
      "networkDefinition": {
        "type": "object",
        "required": ["driver"],
        "description": "Docker network configuration",
        "properties": {
          "driver": {
            "type": "string",
            "enum": ["bridge", "overlay", "host", "none", "macvlan"]
          },
          
          "internal": {
            "type": "boolean",
            "description": "Whether this network has external connectivity"
          },
          
          "ipam": {
            "type": "object",
            "properties": {
              "config": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "subnet": {
                      "type": "string",
                      "pattern": "^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}/\\d{1,2}$"
                    },
                    "gateway": {
                      "type": "string",
                      "pattern": "^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$"
                    }
                  }
                }
              }
            }
          }
        },
        "additionalProperties": false
      },
      
      "serviceContract": {
        "type": "object",
        "required": ["name", "docker", "provides"],
        "description": "Complete technical specification for deploying a service",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 5,
            "maxLength": 50,
            "description": "Human-readable service name"
          },
          
          "docker": {
            "$ref": "#/$defs/dockerConfiguration"
          },
          
          "ports": {
            "type": "array",
            "items": {
              "$ref": "#/$defs/portMapping"
            },
            "maxItems": 10,
            "description": "Port mappings for external access"
          },
          
          "volumes": {
            "type": "array",
            "items": {
              "$ref": "#/$defs/volumeMapping"
            },
            "maxItems": 20,
            "description": "Volume mounts for persistent storage"
          },
          
          "environment": {
            "type": "object",
            "patternProperties": {
              "^[A-Z][A-Z0-9_]*$": {
                "type": "string"
              }
            },
            "description": "Environment variables with standard naming convention"
          },
          
          "command": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ],
            "description": "Override container command"
          },
          
          "working_dir": {
            "type": "string",
            "description": "Working directory inside container"
          },
          
          "provides": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^cap\\.[a-z-]+$"
            },
            "minItems": 1,
            "uniqueItems": true,
            "description": "Capabilities this service provides"
          },
          
          "requires": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^cap\\.[a-z-]+$"
            },
            "uniqueItems": true,
            "description": "Capabilities this service requires to function"
          },
          
          "suggests": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^cap\\.[a-z-]+$"
            },
            "uniqueItems": true,
            "description": "Optional capabilities that enhance this service"
          },
          
          "conflicts": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[a-z]+\\.[a-z0-9-]+$"
            },
            "uniqueItems": true,
            "description": "Services that cannot run alongside this one"
          },
          
          "device_requests": {
            "type": "array",
            "items": {
              "$ref": "#/$defs/deviceRequest"
            },
            "description": "Hardware device access requirements (GPUs, etc.)"
          },
          
          "resource_requirements": {
            "$ref": "#/$defs/resourceRequirements"
          },
          
          "scaling": {
            "$ref": "#/$defs/scalingConfiguration"
          },
          
          "healthcheck": {
            "$ref": "#/$defs/healthcheckConfiguration"
          },
          
          "networks": {
            "type": "object",
            "description": "Network assignments for different profiles",
            "patternProperties": {
              "^[a-z-]+$": {
                "type": "array",
                "items": {
                  "type": "string",
                  "pattern": "^[a-z_-]+$"
                },
                "uniqueItems": true
              }
            }
          },
          
          "security": {
            "$ref": "#/$defs/securityConfiguration"
          }
        },
        "additionalProperties": false
      },
      
      "dockerConfiguration": {
        "type": "object",
        "required": ["image", "profiles"],
        "description": "Docker-specific configuration for the container",
        "properties": {
          "image": {
            "type": "string",
            "pattern": "^[a-z0-9.-]+(/[a-z0-9._-]+)*:[a-z0-9._-]+$",
            "description": "Docker image with tag"
          },
          
          "platform": {
            "type": "string",
            "enum": ["linux/amd64", "linux/arm64", "linux/arm/v7"],
            "description": "Target platform architecture"
          },
          
          "profiles": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[a-z]+$"
            },
            "minItems": 1,
            "uniqueItems": true,
            "description": "Docker Compose profiles that activate this service"
          },
          
          "build": {
            "type": "object",
            "description": "Build configuration if building from source",
            "properties": {
              "context": {
                "type": "string"
              },
              "dockerfile": {
                "type": "string"
              },
              "args": {
                "type": "object",
                "patternProperties": {
                  "^[A-Z][A-Z0-9_]*$": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "additionalProperties": false
      },
      
      "portMapping": {
        "type": "object",
        "required": ["container", "protocol", "description"],
        "description": "Port mapping configuration",
        "properties": {
          "container": {
            "type": "integer",
            "minimum": 1,
            "maximum": 65535,
            "description": "Port inside the container"
          },
          
          "host_range": {
            "type": "string",
            "pattern": "^\\d{1,5}(-\\d{1,5})?$",
            "description": "Host port or range (e.g., '8080' or '8080-8090')"
          },
          
          "protocol": {
            "type": "string",
            "enum": ["tcp", "udp"],
            "description": "Network protocol"
          },
          
          "description": {
            "type": "string",
            "minLength": 5,
            "maxLength": 100,
            "description": "Purpose of this port"
          },
          
          "public": {
            "type": "boolean",
            "description": "Whether this port should be exposed publicly",
            "default": false
          }
        },
        "additionalProperties": false
      },
      
      "volumeMapping": {
        "type": "object",
        "required": ["name", "mount", "type"],
        "description": "Volume mount configuration",
        "properties": {
          "name": {
            "type": "string",
            "pattern": "^[a-z0-9_-]+$",
            "description": "Volume name for Docker"
          },
          
          "mount": {
            "type": "string",
            "pattern": "^/[a-zA-Z0-9/./_-]*$",
            "description": "Mount path inside container"
          },
          
          "type": {
            "type": "string",
            "enum": ["named", "bind", "tmpfs"],
            "description": "Type of volume mount"
          },
          
          "source": {
            "type": "string",
            "description": "Source path for bind mounts"
          },
          
          "backup_priority": {
            "type": "string",
            "enum": ["critical", "high", "medium", "low"],
            "description": "Importance level for backup systems"
          },
          
          "read_only": {
            "type": "boolean",
            "description": "Whether mount is read-only",
            "default": false
          }
        },
        "additionalProperties": false
      },
      
      "deviceRequest": {
        "type": "object",
        "required": ["driver"],
        "description": "Hardware device access request",
        "properties": {
          "driver": {
            "type": "string",
            "enum": ["nvidia", "amd"],
            "description": "Device driver type"
          },
          
          "count": {
            "oneOf": [
              {
                "type": "string",
                "enum": ["all"]
              },
              {
                "type": "integer",
                "minimum": 1
              }
            ],
            "description": "Number of devices to request"
          },
          
          "capabilities": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["gpu", "compute", "utility", "video", "graphics", "display"]
            },
            "uniqueItems": true,
            "description": "Device capabilities needed"
          }
        },
        "additionalProperties": false
      },
      
      "resourceRequirements": {
        "type": "object",
        "description": "Hardware resource requirements and limits",
        "properties": {
          "cpu_cores": {
            "type": "number",
            "minimum": 0.1,
            "maximum": 128,
            "description": "CPU cores required"
          },
          
          "memory_mb": {
            "type": "integer",
            "minimum": 64,
            "maximum": 1048576,
            "description": "RAM requirement in megabytes"
          },
          
          "storage_gb": {
            "type": "integer",
            "minimum": 1,
            "maximum": 10240,
            "description": "Storage requirement in gigabytes"
          },
          
          "gpu_memory_mb": {
            "type": "integer",
            "minimum": 1024,
            "maximum": 81920,
            "description": "GPU VRAM requirement in megabytes"
          },
          
          "network_bandwidth_mbps": {
            "type": "integer",
            "minimum": 1,
            "description": "Network bandwidth requirement in Mbps"
          }
        },
        "additionalProperties": false
      },
      
      "scalingConfiguration": {
        "type": "object",
        "required": ["min_replicas", "max_replicas"],
        "description": "Auto-scaling configuration",
        "properties": {
          "min_replicas": {
            "type": "integer",
            "minimum": 0,
            "maximum": 100
          },
          
          "max_replicas": {
            "type": "integer",
            "minimum": 1,
            "maximum": 100
          },
          
          "scale_metric": {
            "type": "string",
            "enum": ["cpu_usage", "memory_usage", "gpu_memory", "gpu_utilization", "request_rate", "connection_count", "active_sessions", "active_users", "storage_usage", "none"],
            "description": "Metric to use for scaling decisions"
          },
          
          "scale_threshold": {
            "type": "number",
            "minimum": 0.1,
            "maximum": 100,
            "description": "Threshold percentage for scaling trigger"
          }
        },
        "additionalProperties": false
      },
      
      "healthcheckConfiguration": {
        "type": "object",
        "description": "Container health monitoring configuration",
        "oneOf": [
          {
            "required": ["endpoint"],
            "properties": {
              "endpoint": {
                "type": "string",
                "pattern": "^/[a-zA-Z0-9/./_-]*$",
                "description": "HTTP endpoint for health checks"
              }
            }
          },
          {
            "required": ["command"],
            "properties": {
              "command": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "minItems": 1,
                "description": "Command to run for health check"
              }
            }
          }
        ],
        "properties": {
          "interval": {
            "type": "string",
            "pattern": "^\\d+[smh]$",
            "description": "How often to run health check"
          },
          
          "timeout": {
            "type": "string",
            "pattern": "^\\d+[smh]$",
            "description": "How long to wait for health check"
          },
          
          "retries": {
            "type": "integer",
            "minimum": 1,
            "maximum": 10,
            "description": "Number of retries before marking unhealthy"
          },
          
          "start_period": {
            "type": "string",
            "pattern": "^\\d+[smh]$",
            "description": "Grace period before health checks start"
          }
        },
        "additionalProperties": false
      },
      
      "securityConfiguration": {
        "type": "object",
        "description": "Security-related configuration",
        "properties": {
          "user": {
            "type": "string",
            "pattern": "^[a-z0-9_-]+$",
            "description": "User to run container as"
          },
          
          "read_only": {
            "type": "boolean",
            "description": "Whether container filesystem is read-only"
          },
          
          "no_new_privileges": {
            "type": "boolean",
            "description": "Prevent privilege escalation"
          },
          
          "cap_drop": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[A-Z_]+$"
            },
            "description": "Linux capabilities to drop"
          },
          
          "cap_add": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[A-Z_]+$"
            },
            "description": "Linux capabilities to add"
          }
        },
        "additionalProperties": false
      },
      
      "conflictDefinition": {
        "type": "object",
        "required": ["services", "reason"],
        "description": "Services that conflict with each other",
        "properties": {
          "services": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[a-z]+\\.[a-z0-9-]+$"
            },
            "minItems": 2,
            "uniqueItems": true
          },
          
          "reason": {
            "type": "string",
            "minLength": 20,
            "description": "Why these services conflict"
          },
          
          "resolution": {
            "type": "string",
            "minLength": 20,
            "description": "How to resolve this conflict"
          }
        },
        "additionalProperties": false
      },
      
      "environmentTemplate": {
        "type": "object",
        "required": ["description", "global_env"],
        "description": "Pre-configured environment variable set",
        "properties": {
          "description": {
            "type": "string",
            "minLength": 20,
            "maxLength": 200
          },
          
          "global_env": {
            "type": "object",
            "patternProperties": {
              "^[A-Z][A-Z0-9_]*$": {
                "type": "string"
              }
            },
            "description": "Environment variables applied to all services"
          },
          
          "service_overrides": {
            "type": "object",
            "patternProperties": {
              "^[a-z]+\\.[a-z0-9-]+$": {
                "type": "object",
                "patternProperties": {
                  "^[A-Z][A-Z0-9_]*$": {
                    "type": "string"
                  }
                }
              }
            },
            "description": "Service-specific environment variable overrides"
          }
        },
        "additionalProperties": false
      }
    }
  }