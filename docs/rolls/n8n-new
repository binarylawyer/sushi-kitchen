title: n8n
profile: hosomaki
category: automation
status: core
image: n8nio/n8n:1.23.0
ports: ["5678:5678"]
env_vars:
N8N_ENCRYPTION_KEY: "${N8N_ENCRYPTION_KEY}"
N8N_HOST: "${N8N_HOST:-localhost}"
N8N_PORT: "5678"
N8N_PROTOCOL: "${N8N_PROTOCOL:-http}"
DB_TYPE: "postgresdb"
DB_POSTGRESDB_HOST: "postgres"
DB_POSTGRESDB_PORT: "5432"
DB_POSTGRESDB_DATABASE: "${POSTGRES_DB:-sushidb}"
DB_POSTGRESDB_USER: "${POSTGRES_USER:-sushi}"
DB_POSTGRESDB_PASSWORD: "${POSTGRES_PASSWORD:-changeme}"
EXECUTIONS_DATA_SAVE_ON_ERROR: "all"
EXECUTIONS_DATA_SAVE_ON_SUCCESS: "all"
GENERIC_TIMEZONE: "${TZ:-America/New_York}"
requires: [postgres, redis]
resources:
cpu: "1-2"
ram: "1GB-4GB"
gpu: false
storage: "5GB+"
otel:
service_name: "n8n"
exporters: ["otlp", "prometheus"]
loki:
labels: ["app=n8n","roll=hosomaki"]
security:
secrets: ["N8N_ENCRYPTION_KEY", "DB_PASSWORD"]
sso: true
auth_methods: ["basic", "oauth2", "api_key"]
last_updated: 2025-01-12
maintainers: ["@sushichef"]
n8n
What it is
n8n is a powerful workflow automation platform that connects your apps and services with a visual, node-based editor‚Äîlike Zapier but self-hosted and with full code access when you need it.

Summary Table
FieldValueTitlen8nProfilehosomakiCategoryautomationStatuscoreImagen8nio/n8n:1.23.0Ports5678:5678 (Web UI & API)ResourcesCPU: 1-2 cores, RAM: 1-4GB, GPU: noOTELservice_name=n8n, exporters=otlp, prometheusLoki Labelsapp=n8n, roll=hosomakiSecuritySecrets: N8N_ENCRYPTION_KEY, SSO: yesLast Updated2025-01-12Maintainers@sushichef

Why you'd use it

Automate repetitive tasks ‚Äî Connect 400+ apps and services without writing code
Build AI workflows ‚Äî Native LLM nodes for OpenAI, Anthropic, and local models via LiteLLM
Process data pipelines ‚Äî Transform, filter, and route data between your services
Create webhooks & APIs ‚Äî Turn any workflow into an instant API endpoint
Schedule jobs ‚Äî Cron-based triggers for regular data processing and maintenance

üç£ Discovering from search? n8n is the automation heart of the Hosomaki (core) platter in Sushi Kitchen. Learn how to combine it with other services ‚Üí

Quick start
bash# Using Sushi Kitchen profiles (recommended)
docker compose --profile hosomaki up -d

# Or run n8n standalone
docker compose up -d n8n

Web UI: http://localhost:5678
API: http://localhost:5678/api/v1
Webhook URL: http://localhost:5678/webhook/[workflow-id]
First run: Create your admin account, then start building workflows immediately


Configuration
Environment Variables
VariableDefaultRequiredNotesN8N_ENCRYPTION_KEY(none)Yes32+ character string for credential encryptionN8N_HOSTlocalhostNoPublic hostname for webhook URLsN8N_PORT5678NoInternal port (rarely needs changing)N8N_PROTOCOLhttpNoSet to https when using TLSDB_TYPEpostgresdbNoDatabase type (sqlite3, postgresdb, mysqldb)DB_POSTGRESDB_HOSTpostgresNoPostgreSQL hostnameDB_POSTGRESDB_PASSWORDchangemeYesPostgreSQL passwordEXECUTIONS_DATA_SAVE_ON_ERRORallNoSave failed execution dataEXECUTIONS_DATA_SAVE_ON_SUCCESSallNoSave successful execution dataN8N_BASIC_AUTH_ACTIVEfalseNoEnable basic authenticationN8N_BASIC_AUTH_USER(none)If auth enabledBasic auth usernameN8N_BASIC_AUTH_PASSWORD(none)If auth enabledBasic auth password
Advanced Configuration
For production deployments, consider these additional settings:
bash# Performance tuning
N8N_CONCURRENCY_PRODUCTION_LIMIT=10  # Max parallel executions
N8N_PAYLOAD_SIZE_MAX=16              # Max payload size in MB

# Security hardening
N8N_BLOCK_ENV_ACCESS_IN_NODE=true    # Block env var access in code nodes
N8N_DISABLE_UI=false                 # API-only mode

# Workflow settings
EXECUTIONS_DATA_MAX_AGE=336          # Hours to keep execution data
EXECUTIONS_DATA_PRUNE=true           # Auto-delete old executions

Volumes

n8n_data:/home/node/.n8n ‚Äî Workflows, credentials, and settings
./n8n/workflows:/workflows ‚Äî Shared workflow templates (optional)
./n8n/custom:/home/node/.n8n/custom ‚Äî Custom nodes (optional)


Compose snippet
yamlservices:
  n8n:
    image: n8nio/n8n:1.23.0
    profiles: ["hosomaki"]
    container_name: sushi-n8n
    restart: unless-stopped
    ports:
      - "5678:5678"  # Web UI and API
    environment:
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - N8N_HOST=${N8N_HOST:-localhost}
      - N8N_PORT=5678
      - N8N_PROTOCOL=${N8N_PROTOCOL:-http}
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB:-sushidb}
      - DB_POSTGRESDB_USER=${POSTGRES_USER:-sushi}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD:-changeme}
      - EXECUTIONS_DATA_SAVE_ON_ERROR=all
      - EXECUTIONS_DATA_SAVE_ON_SUCCESS=all
      - GENERIC_TIMEZONE=${TZ:-America/New_York}
    volumes:
      - n8n_data:/home/node/.n8n
      - ./n8n/workflows:/workflows:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - sushi-net
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:5678/healthz"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  n8n_data:

Video Tutorials
Getting Started with n8n
<iframe width="560" height="315" src="https://www.youtube.com/embed/RpjQTGKm-ok" title="n8n Beginner Tutorial" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
Learn the basics of n8n in 15 minutes - creating your first workflow, understanding nodes, and automation fundamentals.
Building AI Workflows in n8n
<iframe width="560" height="315" src="https://www.youtube.com/embed/kMSGYw7rSx8" title="AI Automation with n8n" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
Connect n8n to OpenAI, Claude, and local LLMs through LiteLLM - build RAG pipelines, chat interfaces, and content generation workflows.
Advanced n8n Techniques
<iframe width="560" height="315" src="https://www.youtube.com/embed/kH5pZy85eAQ" title="Advanced n8n Workflows" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
Master code nodes, error handling, parallel processing, and complex data transformations for production workflows.

Integrations
Works great with:

LiteLLM ‚Äî Connect to any LLM through n8n's HTTP Request node
PostgreSQL ‚Äî Store workflow data and custom tables
Redis ‚Äî Queue management for heavy workflows
MinIO ‚Äî Process and store files from workflows
Qdrant ‚Äî Build RAG workflows with vector search
ComfyUI ‚Äî Trigger image generation pipelines
Flowise ‚Äî Chain complex LangChain workflows

API Endpoints

GET /api/v1/workflows ‚Äî List all workflows
POST /api/v1/workflows/{id}/activate ‚Äî Activate a workflow
POST /webhook/{id} ‚Äî Trigger webhook workflows
GET /healthz ‚Äî Health check endpoint
Full API documentation

Common Webhook Patterns
javascript// Webhook URL format
http://localhost:5678/webhook/[workflow-id]
http://localhost:5678/webhook-test/[workflow-id]  // Test mode

// Custom webhook paths (set in workflow)
http://localhost:5678/webhook/my-custom-path

Security notes
‚ö†Ô∏è Important security considerations:

Change the encryption key ‚Äî Generate a secure 32+ character key for N8N_ENCRYPTION_KEY
Enable authentication ‚Äî Use basic auth or SSO for production deployments
Secure webhooks ‚Äî Use webhook authentication headers for public endpoints
Restrict code nodes ‚Äî Set N8N_BLOCK_ENV_ACCESS_IN_NODE=true in production

Recommended security setup:

Generate secure encryption key:

bashopenssl rand -hex 32 > n8n_encryption_key.txt

Enable basic authentication:

yamlenvironment:
  - N8N_BASIC_AUTH_ACTIVE=true
  - N8N_BASIC_AUTH_USER=admin
  - N8N_BASIC_AUTH_PASSWORD=${N8N_ADMIN_PASSWORD}

Use Caddy for TLS termination:

n8n.yourdomain.com {
    reverse_proxy n8n:5678
}

Implement webhook authentication:

javascript// In your webhook workflow
if ($request.headers['x-webhook-secret'] !== 'your-secret') {
    throw new Error('Unauthorized');
}

Troubleshooting
Common issues:
Workflows not executing
‚Üí Check PostgreSQL connection and that the database is initialized properly
Cannot access UI at localhost:5678
‚Üí Ensure port 5678 isn't already in use: lsof -i :5678
Credentials not saving
‚Üí Verify N8N_ENCRYPTION_KEY is set and hasn't changed since last run
Webhook URLs showing wrong domain
‚Üí Set N8N_HOST to your public domain and N8N_PROTOCOL to https if using TLS
High memory usage
‚Üí Limit execution history: Set EXECUTIONS_DATA_MAX_AGE=168 (7 days)
Health checks:
bash# Check if n8n is running
docker compose ps n8n

# View logs
docker compose logs -f n8n

# Test API connectivity
curl http://localhost:5678/healthz

# Check database connection
docker compose exec n8n nc -zv postgres 5432

Resource requirements
Minimum (Development):

CPU: 1 core
RAM: 512MB
Storage: 1GB

Recommended (Production):

CPU: 2-4 cores
RAM: 2-4GB
Storage: 10GB SSD
Network: Low latency to integrated services

Scaling considerations:

Each workflow execution uses ~50-200MB RAM
Parallel executions multiply resource usage
File processing workflows need more storage
AI/LLM workflows benefit from more CPU


Upgrading
Backup first:
bash# Export all workflows
docker compose exec n8n n8n export:workflow --all --output=/workflows/backup.json

# Backup volume
docker compose down
tar -czf n8n-backup-$(date +%Y%m%d).tar.gz ./volumes/n8n_data
Update process:
bash# Update image version in docker-compose.yml
# Then:
docker compose pull n8n
docker compose up -d n8n
Migration notes:

v0.x to v1.x: Database schema migrations run automatically
Encryption key: Never change after initial setup or credentials will be lost
Breaking changes: Check release notes before major updates


Recipes
Recipe: AI Content Pipeline
Perfect for: Content creators, marketers, researchers
Services needed:

n8n (hosomaki)
AnythingLLM (futomaki)
ComfyUI (uramaki)
MinIO (hosomaki)

Setup:
bashdocker compose --profile hosomaki --profile futomaki --profile uramaki up -d
Configuration:

Create n8n workflow with RSS trigger
Connect to AnythingLLM for content enhancement
Generate images with ComfyUI via HTTP Request
Store results in MinIO
Post to social media or CMS

Example workflow:
javascript// n8n Code node example
const prompt = `Create image: ${$json.article_summary}`;
const response = await $http.post('http://comfyui:8188/prompt', {
    prompt: prompt,
    workflow: 'text2img'
});
return { image_url: response.url };
Recipe: Data Processing Pipeline
Perfect for: Data engineers, analysts
Services needed:

n8n (hosomaki)
PostgreSQL (hosomaki)
JupyterLab (chirashi)
Grafana (dragon)

Workflow:

Schedule n8n to fetch data from APIs
Process and store in PostgreSQL
Analyze in JupyterLab notebooks
Visualize in Grafana dashboards


Performance tuning
For high-volume workflows:
yaml# Add to docker-compose.override.yml
services:
  n8n:
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G
    environment:
      - N8N_CONCURRENCY_PRODUCTION_LIMIT=20
      - NODE_OPTIONS=--max-old-space-size=6144
Optimization tips:

Use workflow timeouts to prevent hanging executions
Implement error workflows for automatic retry logic
Split large workflows into smaller, chained workflows
Use Redis for queue mode in high-volume scenarios
Disable execution saving for high-frequency workflows


Monitoring
Metrics available:

n8n_workflow_executions_total ‚Äî Total workflow executions
n8n_workflow_execution_duration_seconds ‚Äî Execution duration
n8n_workflow_execution_errors_total ‚Äî Failed executions
n8n_node_execution_duration_seconds ‚Äî Individual node performance

Prometheus query examples:
promql# Workflow execution rate
rate(n8n_workflow_executions_total[5m])

# Error rate by workflow
rate(n8n_workflow_execution_errors_total[5m]) by (workflow_name)

# Average execution duration
histogram_quantile(0.95, n8n_workflow_execution_duration_seconds)
Grafana dashboard:

Import dashboard ID: 17522
Or use provided: ./dashboards/n8n-monitoring.json


Development
Building custom nodes:
bash# Clone n8n-nodes-starter
git clone https://github.com/n8n-io/n8n-nodes-starter.git
cd n8n-nodes-starter
npm install
npm run build

# Mount in docker-compose
volumes:
  - ./custom-nodes:/home/node/.n8n/custom
Environment setup:
bash# Development mode with hot reload
docker compose run --rm -p 5678:5678 n8n n8n start --tunnel
Contributing:

n8n Contributing Guide
Community Forum
Discord Server


References

üìö Official Documentation
üí¨ Community Forum
üêô GitHub Repository
üé• n8n YouTube Channel
üìñ API Reference
üéì n8n Academy
üîß Workflow Templates


Part of the Sushi Kitchen project - Quick, Easy, Served Fresh
